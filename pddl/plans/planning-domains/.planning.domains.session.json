{
    "hash": "x2DlBPIsOz",
    "writeHash": "PammE7L6cLyOSMl",
    "versionDate": "2022-05-10T18:45:30.000Z",
    "files": {
        "domain-2-1.pddl": ";Model version 2.1. PDDL2.1, incl. numerical fluents.\n\n; Author: Emma Karlsmose\n; Last edited: 10 May 2022\n\n; Domain to represent waypoints by their coordinates extracted from simulation. \n; Distances between waypoints will be represented as euclidean distance\n; The idea is that any problem will try to minimise the total distance traveled, \n; but still visit all waypoints and complete all tasks. \n;\n; References:\n;   - HASLUM2019pddl - PDDL: An Introduction to the Planning Domain Definition Language \n;       (Pages 31, 27-34, 84, 83-91)\n\n\n\n(define (domain inspection21)\n\n    ;Fluents indicates the use of the numeric fragment of PDDL \n    (:requirements :strips :typing :negative-preconditions :adl :fluents)\n\n    (:types\n        coordinate interesting - object\n        posx posy - coordinate ;for readability i will simply use waypoint type where a waypoint is treated\n                                ;and this is mainly here to make clear that a waypoint consists of x and y coordinates\n                                ;and that they are not the same. This is a bit of misuse of the language.\n    )\n\n    ;predicates - truth statements about the current state\n    (:predicates\n        (at-waypoint ?x - posx ?y - posy)      ;true iff position (x, y) is a waypoint and the robot is located at x\n        (is-waypoint ?x - posx ?y - posy)\n        (has-passed ?x - posx ?y - posy)              ;true iff (x, y) is a waypoint nad the robot has previously passed x\n        ;(rob-facing ?o - object)         ;true iff x is a waypoint and the robot is facing x\n        (has-inspected ?i - interesting)            ;true iff o is an interesting nuclear reactor object and the robot has inspected object\n        (by-interesting ?x - posx ?y - posy ?o - interesting)  ;true iff o is an interesting nuclear reactor object, x is a waypoint, and x is located at o\n    )\n    \n    ;functions\n    (:functions\n        (waypoint ?x - coordinate)   ; Euclidian distance between two waypoints. UPDATE LATER\n        ;Have something to note radiation. Page 32(52) in pdf\n        (total-cost)\n    )\n\n\n    ; ;action to turn towards waypoint\n    ; (:action turn\n    ;     ;we have a waypoint x and some elements e and f that is either an object or a waypoint .\n    ;     :parameters (?w - waypoint ?e - object ?f - object) \n        \n    ;     ;the robot is at waypoint x and there is a waypoint or an interesting object\n    ;     :precondition (and  (at-waypoint ?w) \n    ;                         (rob-facing ?f) \n    ;                         (not (rob-facing ?e))) \n        \n    ;     ;the effect is that the robot is facing the object e and no longer the object f\n    ;     :effect (and    (at-waypoint ?w) \n    ;                     (rob-facing ?e) \n    ;                     (not (rob-facing ?f)))\n        \n    ;     ;NEED ATTENTION: HOW DO I MAKE THE ROBOT STOP FACING EVERYTHING ELSE???\n    \n    ; )\n    \n    ;action to move to a certain waypoint\n    (:action move\n        ;we have two waypoints: x and y.\n        :parameters (?from_x ?to_x - posx ?from_y ?to_y - posy)\n        \n        ;the robot is at waypoint from and there is a second waypoint 2\n        :precondition (and  (at-waypoint ?from_x ?from_y)\n                            (is-waypoint ?to_x ?to_y))\n        \n        ;effect of move is that robot will be at waypoint waypoint y \n        :effect (and    (at-waypoint ?to_x ?to_y) \n                        (not (at-waypoint ?from_x ?from_y)) \n                        (has-passed ?from_x ?from_y) \n                        ;(has-passed ?from) ; figure out a better way to do this, each waypoint except the first will be considered passed twice.\n                        ;increases the total cost by the distance between waypoints. Square euclidian distance to avoid distances\n                        (increase (total-cost)\n                                  (* ( + ( * (waypoint ?from_x) (waypoint ?from_y))\n                                         ( * (waypoint ?to_x) (waypoint ?to_y))) \n                                     ( + ( * (waypoint ?from_x) (waypoint ?from_y))\n                                         ( * (waypoint ?to_x) (waypoint ?to_y))))) \n                         )\n    )\n    \n    ;action to inspect an object\n    (:action inspect\n        ;we have a waypoint x and an object o\n        :parameters (?x - posx ?y - posy ?i - interesting)\n        \n        ;robot is at waypoint x, waypoint x is at the interesting object o, and robot is facing o\n        :precondition (and  (is-waypoint ?x ?y)\n                            (at-waypoint ?x ?y) \n                            (by-interesting ?x ?y ?i)) \n        \n        ;the element goes to having been inspected\n        :effect (and (has-inspected ?i))\n    )\n    \n    ;action to sense radiation\n    \n    \n    \n)\n\n; NOTES:\n;   - In the numeric fragment of PDDL all functions are number valued, so the \n;\n",
        "domain21-prob05-move03.pddl": ";Model version 1.5. Movement between and abstract inspection of various\n;objects and waypoints.  \n\n(define (problem move-robot)\n    (:domain inspection21)\n    \n    ;Objects\n    (:objects   object1 object2 object3 - interesting ;Points of interest in the world\n                ;Declare objects for coordinate values, one for x and y and up to the\n                ;highest number of waypoints in the problem\n                w1x w2x w3x w4x w5x w6x w7x w8x w9x w10x\n                w11x w12x w13x w14x w15x w16x w17x w18x w19x w20x \n                w21x - posx\n                w1y w2y w3y w4y w5y w6y w7y w8y w9y w10y\n                w11y w12y w13y w14y w15y w16y w17y w18y w19y w20y\n                w21y - posy\n    )\n    \n    ;Initial State\n    (:init  ;Specify coordinate values (imported from file in misc):\n            (= (waypoint w1x) -0.0078611373901367) \n            (= (waypoint w2x) -0.0855283737182617) \n            (= (waypoint w3x) -0.0213308334350585) \n            (= (waypoint w4x) -0.010416030883789) \n            (= (waypoint w5x) 0.023655891418457) \n            (= (waypoint w6x) -0.0940732955932617) \n            (= (waypoint w7x) -0.2073278427124023) \n            (= (waypoint w8x) -0.0810909271240234) \n            (= (waypoint w9x) -0.7112255096435547) \n            (= (waypoint w10x) -0.9256105422973632) \n            (= (waypoint w11x) -1.4557132720947266) \n            (= (waypoint w12x) -1.3065519332885742) \n            (= (waypoint w13x) -1.330887794494629) \n            (= (waypoint w14x) -1.2670660018920898) \n            (= (waypoint w15x) -1.175724983215332) \n            (= (waypoint w16x) -1.8202133178710935) \n            (= (waypoint w17x) -2.5858850479125977) \n            (= (waypoint w18x) -2.6054906845092773) \n            (= (waypoint w19x) -2.742687225341797) \n            (= (waypoint w20x) -3.02841854095459) \n            (= (waypoint w21x) -3.2291698455810547) \n            (= (waypoint w1y) -0.9847574234008788) \n            (= (waypoint w2y) -2.0470895767211914) \n            (= (waypoint w3y) -3.010516166687012) \n            (= (waypoint w4y) -4.010639190673828) \n            (= (waypoint w5y) -4.975879669189453) \n            (= (waypoint w6y) -5.762591361999512) \n            (= (waypoint w7y) -7.102699279785156) \n            (= (waypoint w8y) -8.345015525817871) \n            (= (waypoint w9y) -9.339797973632812) \n            (= (waypoint w10y) -9.107548713684082) \n            (= (waypoint w11y) -8.359051704406738) \n            (= (waypoint w12y) -6.637836456298828) \n            (= (waypoint w13y) -5.03082275390625) \n            (= (waypoint w14y) -4.158780097961426) \n            (= (waypoint w15y) -3.05061149597168) \n            (= (waypoint w16y) -2.975918769836426) \n            (= (waypoint w17y) -3.393125534057617) \n            (= (waypoint w18y) -4.204794883728027) \n            (= (waypoint w19y) -5.9219465255737305) \n            (= (waypoint w20y) -7.939396858215332) \n            (= (waypoint w21y) -8.889455795288086)\n\n            ;specify which combination of waypoint coordinates are valid\n            (is-waypoint w1x w1y) \n            (is-waypoint w2x w2y) \n            (is-waypoint w3x w3y) \n            (is-waypoint w4x w4y) \n            (is-waypoint w5x w5y) \n            (is-waypoint w6x w6y) \n            (is-waypoint w7x w7y) \n            (is-waypoint w8x w8y) \n            (is-waypoint w9x w9y) \n            (is-waypoint w10x w10y) \n            (is-waypoint w11x w11y) \n            (is-waypoint w12x w12y) \n            (is-waypoint w13x w13y) \n            (is-waypoint w14x w14y) \n            (is-waypoint w15x w15y) \n            (is-waypoint w16x w16y) \n            (is-waypoint w17x w17y) \n            (is-waypoint w18x w18y) \n            (is-waypoint w19x w19y) \n            (is-waypoint w20x w20y) \n            (is-waypoint w21x w21y)\n\n            ;total cost (total distance traveled) starts as 0\n            (= (total-cost) 0)\n\n            ;specify where the inspection objects are located\n            (by-interesting w4x w4y object1) \n            (by-interesting w11x w11y object2)\n            (by-interesting w14x w14y object3)\n\n            ;specify where the robot starts\n            (at-waypoint w1x w1y)\n    )\n    \n    ;goal specification;\n    ; for all combinations of x and y, either it isn't a waypoint or it has been passed\n    (:goal (and (forall (?x -posx ?y - posy)\n                        (or (not (is-waypoint ?x ?y))\n                            (has-passed ?x ?y))) ;since the coordinates can only be put as passed for the combinations,  \n                (at-waypoint w1x w1y)))\n\n    \n    (:metric minimize (total-cost))  \n)"
    },
    "plugins": {}
}