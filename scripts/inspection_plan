#!/usr/bin/env python3

# Inspired by https://github.com/pirobot/ros-by-example/blob/master/rbx_vol_1/rbx1_nav/nodes/move_base_square.py
# Adapted to project by: Emma Karlsmose
# Last edited: 13/05/2022
#
# Takes a plan file output by a pddl planner, parses it, and sends the actions to
# to the simulation. 


import rospy
import actionlib
import rospkg
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

from geometry_msgs.msg import Pose, Point, Quaternion, Twist
from move_base_msgs.msg import MoveBaseAction, MoveBaseGoal 
from gazebo_radiation_plugins.msg import Simulated_Radiation_Msg as radiation_msg


class InspectionPlan():
    def __init__(self):
        rospy.init_node('movebase_client_py', anonymous=False)
        
        self.plan = self.importParsedPlan()
        self.poses = self.importWaypointPoses()
        self.pathLength = len(self.plan)
        #print(waypoints[1])

        # Initialise an array to store any radiation readings
        self.radiationReadings = np.empty((0,4))

        # Publisher to manually control the robot (e.g. to stop it)
        # self.cmd_vel_pub = rospy.Publisher('cmd_vel', Twist)

        # Subscribe to the move_base action server
        self.move_base_client = actionlib.SimpleActionClient("move_base", MoveBaseAction)
        rospy.loginfo("Waiting for move_base action server...")

        #Wait for the server to become available (set to 60 seconds)
        self.move_base_client.wait_for_server(rospy.Duration(60))

        rospy.loginfo("Connected to move base server")
        rospy.loginfo("Starting navigation test")

        resrosult = self.implementPlan(self.pathLength, self.plan)
        if result:
            respy.loginfo("Goal execution done!")



    def importParsedPlan(self):
        waypoints = []

        ## Get path to the inspection_plan package
        rospack = rospkg.RosPack()
        planFile = input("Name of parsed plan (excl extension): ") + ".csv"
        # planFile = "plan16-01-03_waypoints.csv"
        filePath = rospack.get_path('inspection_plan') + \
                          '/src/outputs/parsed-plans/' + \
                           planFile

        ## Orientation is represented as a quaternion, where we have that yaw is rotation around z axis, roll around x and pitch around y, 
        ## and w indicates the amount of rotation which will accur about the axis
        rawPlan = pd.read_csv(filePath,
                                names = ['step_num', 'task', 'coordinates', 'object_type'])

        ## Do a bit of formatting
        rawPlan['coordinates']=[x.strip('[]').split(', ') for x in rawPlan['coordinates']]
        rawPlan['x'] = [float(x) for x, y in rawPlan['coordinates']]
        rawPlan['y'] = [float(y) for x, y in rawPlan['coordinates']]
        rawPlan = rawPlan.drop('coordinates', axis=1)
        # print(type(rawPlan['x'][0]))
        # print(rawPlan)
        return rawPlan



    def importWaypointPoses(self):
        # Get file path
        rospack = rospkg.RosPack()
        waypointFile = input("Name of raw waypoint file (found in waypoints directory, excl extension): ")
        filePath = rospack.get_path('inspection_plan') + \
                    '/waypoints/' + waypointFile + '.csv'
        
        #import file to pandas dataframe
        waypoints = pd.read_csv(filePath, names = ['x', 'y', 'z', 'quat_x', 'quat_y', 'quat_z', 'quat_w'])

        return waypoints


    #helper function to get the full position (coordinates and quaternion) from the x and y coordinates
    def getFullPose(self, x, y):
        # lookup full pose from original waypoint file by comparing to x and y coordinates.
        fullPosition = self.poses[ (self.poses['x'] == x) and (self.poses['y'] == y) ] 
        print("fullPosition: {}".format(fullPosition))
        if fullPosition == None:
            rospy.logerr("Something went wrong. INVALID WAYPOINT")

        # turn into move_base message type
        position = Point(fullPosition['x'], fullPosition['y'], fullPosition['z'])
        orientation = Quaternion(fullPosition['quat_x'], fullPosition['quat_y'], fullPosition['quat_z'], fullPosition['quat_w'])
        # for index, row in rawWaypoints.iterrows():
        #     position = Point(row['x'], row['y'], row['z'])
        #     orientation = Quaternion(row['roll'], row['pitch'], row['yaw'], row['w'])
        #     waypoints.append(Pose(position, orientation))
        
        #print(type(waypoints))
        return Pose(position, orientation)



    def implementPlan(self, length, plan_df):
        # Counter to track which step in plan we're on
        i = 0
        issues = 0
        consecutiveIssues = 0
        madeIt = True

        # Cycle through the waypoints
        while i < length and not rospy.is_shutdown():
            
            xcoord = plan_df.iloc[i]['x']
            ycoord = plan_df.iloc[i]['y']
            
            if plan_df.iloc[i]['task'] == 'move':
                # # Initialise new goal
                # goal = MoveBaseGoal()
                
                # # Set map
                # goal.target_pose.header.frame_id = 'map' 

                # # Set time stamp to 'now'
                # goal.target_pose.header.stamp = rospy.Time.now()

                # goal.target_pose.pose.position.x = xcoord
                # goal.target_pose.pose.position.y = ycoord
                # goal.target_pose.pose.orientation.w = 1.0

                # Set the goal pose to the i-th waypoint
                #goal.target_pose.pose = waypoints[i]

                self.move(xcoord, ycoord)

                # Determine if movement was successful (see notes for definitions)
                if self.move_base_client.get_state() == 3:
                    rospy.loginfo("Completed step {} of plan".format(str(i)))
                    # rospy.loginfo("Moved to waypoint {}".format(str(i)))
                    consecutiveIssues == 0
                    madeIt = True
                elif self.move_base_client.get_state() == 1:
                    rospy.logerr("Goal not reached in time limit. Server may be unavailable")
                    madeIt = False
                    issues += 1
                elif self.move_base_client.get_state() == 4:
                    rospy.logerr("Robot stuck! Cannot reach waypoint {}. Call for help!".format(str(i)))
                    madeIt = False
                    issues += 1
                else: #Something unexpected happened
                    rospy.logerr("New issue: " + 
                                    "\n{} ".format(self.move_base_client.get_goal_status_text()) +
                                    "\nState Number: {}".format(str(self.move_base_client.get_state())))
                    madeIt = False
                    issues += 1

            #The remaining tasks should only be executed if the relevant waypoint has been reached as the plan prescribes. 
            # this may lead to missing readings and inspections if a waypoints has been reached, but this is also where a dynamic
            # integration would be relevant for future work, allowing the robot to pull up the planner if issues arise to get a 
            # new plan. 
            elif plan_df.iloc[i]['task'] == 'inspect' and madeIt == True:
                self.inspectObject(plan_df, i)
            elif plan_df.iloc[i]['task'] == 'register-radiation' and madeIt == True:
                rospy.loginfo("Checking radiation levels...")
                self.recordRadiation()
            elif plan_df.iloc[i]['task'] == 'print-report':
                #Call printReport function to get results of inspection. If this task was reached, the plan was completed to the end (with 
                # some number of issues), and so stoppedEarly is set as false. 
                self.printReport(issues, step=i, stoppedEarly=False)
            elif plan_df.iloc[i]['task'] != 'move' and madeIt == False:
                rospy.logerr("Cannot perform task number {}: {} because robot is not at waypoint. Moving to task number {}".format(i, plan_df.iloc[i]['task'], i+1))
            elif plan_df.iloc[i]['task'] == 'move' and consecutiveIssues > 3:
                #If the robot has been reported stuck for above 3 movement steps, call for a human. The idea is that the human can 
                # then manually enter to move the robot if it is a room without too high radiation, or use remote, manual control or 
                # some other strategy to deal with the stuck robot. Then stop trying. 
                self.callForHuman()
                #Print the report for the inspection so far. 
                self.printReport(issues, step=i, stoppedEarly=True)
                break
            else:
                rospy.logerr("Unknown task. Please check your plan was parsed correctly")
                print(plan_df.iloc[i])

            i += 1
        
        # self.printReport(issues, step=i, stoppedEarly=False)
        self.plotRadiation()
        return True



    def move(self, posx, posy):
        rospy.loginfo("Moving...")

        # We will cancel the goal if it hasn't been reached within 2 min, as this indicates that something has gone wrong. 
        timeLimit = 120

        # Initialise new goal
        goal = MoveBaseGoal()
        
        # Set map
        goal.target_pose.header.frame_id = 'map' 

        # Set time stamp to 'now'
        goal.target_pose.header.stamp = rospy.Time.now()

        goal.target_pose.pose.position.x = posx
        goal.target_pose.pose.position.y = posy
        goal.target_pose.pose.orientation.w = 1.0


        # send goal to MoveBaseAction server
        self.move_base_client.send_goal(goal)

        # wait for server to finish performing action. Allow 1min to get there
        finished = self.move_base_client.wait_for_result(rospy.Duration(timeLimit))
        #print(finished) # See notes
        #print(self.move_base_client.get_goal_status_text())  # See notes
        #print(self.move_base_client.get_result()) # See notes
        #print(self.move_base_client.get_state()) # See notes

        # If the result doesn't arrive, assume the server is not available
        if not finished:
            self.move_base_client.cancel_goal()
            rospy.logerr("Action server not available!")
        else:
        # Result of executing the action
            return self.move_base_client.get_result()
    


    def inspectObject(self, plan_df, index):
        # Here, specific inspection tasks could be called, implemented
        # in new nodes, another function, or otherwise, depending on the specific need.         
        rospy.loginfo("Inspecting object...")
        rospy.sleep(5)
        rospy.loginfo("Inspected object {}".format(plan_df.iloc[index]['object_type']))
        return
    


    # subscribe to topic: /radiation_sensor_plugin/sensor_0. 
    # topic type is gazebo_radiation_plugins/Simulated_Radiation_Msg
    # COULD make this a separate node later
    def recordRadiation(self):
        # radiation message has form:
        #       Header header
        #       float32 value
        #       geometry_msgs/Pose pose
        #       string type
        # see also report
        record = rospy.wait_for_message('/radiation_sensor_plugin/sensor_0', radiation_msg)


        #Split and parse information recieved from topic
        radiationReading = record.value
        position = record.pose.position
        
        # Save reading and position in array
        recordList = np.array([[position.x, position.y, position.z, radiationReading]])
        # print(recordList.shape)
        self.radiationReadings = np.append(self.radiationReadings, recordList, axis=0)
        # print(self.radiationReadings)

        # Send reading confirmation to terminal
        rospy.loginfo("Radiation recorded: \n")
        print(record)
        
        return



    def plotRadiation(self):
        x = self.radiationReadings[0]
        y = self.radiationReadings[1]
        R = self.radiationReadings[3]
        print(x, y, R)
        print(self.radiationReadings)

        plotName = input("What would you like to name your figure?\n")
        plt.figure(figsize=(9,9))
        plt.title("Radiation Readings")
        c = plt.pcolormesh(x, y, R)
        fig.colorbar(c)
        plt.scatter(startx, starty, c='green', zorder=3)
        plt.plot(df[0], df[1], '.', color='orange', zorder=2)
        plt.quiver(df[0][:-1], df[1][:-1], u, v, scale_units='xy', angles='xy', scale=1, width=0.002, headwidth=9, headlength=10, zorder=1)
        plt.ylim(ymax=10, ymin=-10)
        plt.xlim(xmax=10, xmin=-10)
        plt.xticks(range(-9,10,3))
        plt.yticks(range(-9,10,3))
        plt.xlabel("x")
        plt.ylabel("y")
        plt.savefig(self.projectPath + "/src/figures/" + plotName + ".png")
        plt.show()


    # Print out inspection report. 
    def printReport(self, num_issues, step, stoppedEarly):
        #Inspired by tutorial: 
        #https://www.justintodata.com/generate-reports-with-python/
        #https://medium.com/codex/create-a-custom-pdf-using-python-219a7e11c78b

        rospy.loginfo("Inspection plan finished")
        reportName = input("What would you like to name the report? (excl extension)\n")
        
        rospack = rospkg.RosPack()
        filePath = rospack.get_path('inspection_plan') + \
                          '/reports/' + \
                           reportName
        rospy.loginfo("Generating inspection report...")
        df = pd.DataFrame(self.radiationReadings, columns = ['x', 'y', 'z', 'Radiation Value'])
        df.sort_values(by=['x'], inplace = True)

        print(df)


    def outputDFtoPDF(self, pdf, df):
        return

    # example function to call for help. In an actual implementation, this would send a signal to a control room or 
    # similar, alerting the human operator of the issue. 
    def callForHuman(self):
        rospy.loginfo("Called for human assisstance. Stopping plan")

if __name__ == '__main__':
    try:
        InspectionPlan()
    except rospy.ROSInterruptException:
        rospy.loginfo("Navigation test finished. Error occured")


"""
Notes: 

    actionClient.wait_for_result()
        - returns boolean, true if the result from server has been recieved within timelimit
    actionClient.get_goal_status_text() 
        - prints the status text of communication with server (ie status in executing goal). 
            -"Goal reached." for successful execution
            -"Failed to find a valid plan. Even after executing recovery behaviours." for a stuck robot
            -"This goal has been accepted by the simple action server" for no confirmation (good or bad) recieved, i.e. .wait_for_result() timed out to false
    print(self.move_base_client.get_result())
        - returns blank if a valid response has been recieved from server, returns None if no response has been recieved
    print(self.move_base_client.get_state())
        -Gives a integer for status of server communication and executing goal 
            - 1: request sent, no return confirmation recieved - This goal has been accepted by the simple action server
            - 3: success - Goal reached
            - 4: failure - Failed to find a valid plan. Even after executing recovery behaviours.

"""