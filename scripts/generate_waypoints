#!/usr/bin/env python3

# Based on tutorials: 
# - http://wiki.ros.org/ROS/Tutorials/WritingPublisherSubscriber%28python%29
# - https://stackoverflow.com/questions/20432912/writing-to-a-new-file-if-it-doesnt-exist-and-appending-to-a-file-if-it-does
#
# Author: Emma Karlsmose
# Last Edited: 6 May 2022
# 
# Subscriber node to collect waypoints from the /move_base_simple/goal topic.
# Must be run from seperate terminal while simulation is running.
# Source the setup bash script for catkin, and then use rosrun inspection_plan generate_waypoints
# Use 2D Nav Goal to send robot to goal. The goal will be registered by this node as well, 
# and the final collection of waypoints will be outputted to the chosen filename in 
# waypoints directory. 


import rospy
import os
import rospkg
from geometry_msgs.msg import PoseStamped #Import data type published by the topic

#Function to call when a message has been recieved. Posts data in terminal, and saves it to a file in waypoints folder. 
def callback(data, fileName):

    #Split message into data 
    header = data.header
    position = data.pose.position
    orient = data.pose.orientation

    # Send data to terminal
    print("-"*100)
    rospy.loginfo(rospy.get_caller_id() +
                    "\nPOSITION LOGGED!" +
                    "\nHEADER: \n{}\n".format(header) +
                    "\nPOSITION: \n{}\n".format(position) +
                    "\nORIENTATION: \n{}\n".format(orient))

    # Get the path to the file (will be put in project_path/waypoints)
    rospack = rospkg.RosPack()

    packagePath = rospack.get_path('inspection_plan')
    filePath = packagePath + '/waypoints/' + fileName

    # Create string to be saved to file
    dataString = ",".join(str(e) for e in [position.x, position.y, position.z, orient.x, orient.y, orient.z, orient.w])
    
    # Check if the desired output file already exists
    if os.path.exists(filePath):
        filePermission = 'a' #Append data if the file already exists.
    else:
        filePermission = 'w' # otherwise make a new file
        rospy.loginfo("New file created!")
    
    # Add waypoint to datafile
    waypoints = open(filePath, filePermission)
    waypoints.write(dataString + "\n")
    waypoints.close()

    # Send confirmation to terminal
    rospy.loginfo("Waypoint added to file {}!".format(filePath))
    print("-"*100+"\n\n")
    
def waypoint_recorder(fileName):
    # In ROS, nodes are uniquely named. If two nodes with the same
    # name are launched, the previous one is kicked off. The
    # anonymous=True flag means that rospy will choose a unique
    # name for our 'listener' node so that multiple listeners can
    # run simultaneously - from tutorial.
    rospy.init_node('waypointRecorder', anonymous=True)
    
    # this subscribes to the /move_base_simple/goal topic, which is of type PoseStamped, 
    # and when messages are recieved, callback is invoked with the message as its first arguement. 
    rospy.Subscriber("/move_base_simple/goal", PoseStamped, callback, fileName)

    # spin() simply keeps python from exiting until this node is stopped
    rospy.spin()

if __name__ == '__main__':
    dataFile = input("Type output file name here:")+".csv"

    waypoint_recorder(dataFile)
